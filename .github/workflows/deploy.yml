on:
  push:

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      HAS_SSH_KEY: ${{ secrets.SSH_KEY != '' }}
      HAS_SERVER_USER: ${{ secrets.SERVER_USER != '' }}
      HAS_SERVER_ADDR: ${{ secrets.SERVER_ADDR != '' }}
      HAS_POST_DEPLOY_SCRIPT: ${{ secrets.POST_DEPLOY_SCRIPT_PATH != '' }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest', 'ubuntu-latest', 'macos-latest']

    steps:
      - uses: actions/checkout@v4

      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2

      - name: Update Rust
        run: rustup update stable

      - name: Set environment variables
        run: |
          echo "VERSION=$GITHUB_SHA" >> $GITHUB_ENV
          echo "LAUNCHER_NAME=${{ vars.LAUNCHER_NAME }}" >> $GITHUB_ENV
          DATA_LAUNCHER_NAME=$(echo "${{ vars.LAUNCHER_NAME }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '_')
          echo "DATA_LAUNCHER_NAME=$DATA_LAUNCHER_NAME" >> $GITHUB_ENV
          echo "VERSION_MANIFEST_URL=${{ vars.VERSION_MANIFEST_URL }}" >> $GITHUB_ENV
          if [ -n "${{ vars.AUTO_UPDATE_BASE }}" ]; then echo "AUTO_UPDATE_BASE=${{ vars.AUTO_UPDATE_BASE }}" >> $GITHUB_ENV; fi

      - name: Build the launcher
        run: |
          mkdir -p build
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cargo build --bin launcher --profile release-lto
            mv "target/release-lto/launcher.exe" "build/${LAUNCHER_NAME}.exe"
            echo "$VERSION" > build/version_windows.txt
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            cargo build --bin launcher --profile release-lto
            mv "target/release-lto/launcher" "build/${DATA_LAUNCHER_NAME}"
            echo "$VERSION" > build/version_linux.txt
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            mkdir -p icon.iconset
            PNG_PATH="launcher/assets/$DATA_LAUNCHER_NAME.png"
            sips -z 16 16     "$PNG_PATH" --out icon.iconset/icon_16x16.png
            sips -z 32 32     "$PNG_PATH" --out icon.iconset/icon_16x16@2x.png
            sips -z 32 32     "$PNG_PATH" --out icon.iconset/icon_32x32.png
            sips -z 64 64     "$PNG_PATH" --out icon.iconset/icon_32x32@2x.png
            sips -z 64 64     "$PNG_PATH" --out icon.iconset/icon_64x64.png
            sips -z 128 128   "$PNG_PATH" --out icon.iconset/icon_64x64@2x.png
            sips -z 128 128   "$PNG_PATH" --out icon.iconset/icon_128x128.png
            sips -z 256 256   "$PNG_PATH" --out icon.iconset/icon_128x128@2x.png
            sips -z 256 256   "$PNG_PATH" --out icon.iconset/icon_256x256.png
            sips -z 512 512   "$PNG_PATH" --out icon.iconset/icon_256x256@2x.png
            sips -z 512 512   "$PNG_PATH" --out icon.iconset/icon_512x512.png
            sips -z 1024 1024 "$PNG_PATH" --out icon.iconset/icon_512x512@2x.png
            iconutil -c icns icon.iconset -o launcher/assets/icon.icns

            which cargo-bundle || cargo install cargo-bundle

            export MACOSX_DEPLOYMENT_TARGET=10.8

            cargo bundle --bin launcher --profile release-lto --target aarch64-apple-darwin
            mkdir -p app
            cp -r "target/aarch64-apple-darwin/release-lto/bundle/osx/Potato Launcher.app" "app/$LAUNCHER_NAME.app"

            rustup target add x86_64-apple-darwin
            cargo bundle --bin launcher --profile release-lto --target x86_64-apple-darwin

            lipo -create -output "app/$LAUNCHER_NAME.app/Contents/MacOS/launcher" \
              "target/x86_64-apple-darwin/release-lto/bundle/osx/Potato Launcher.app/Contents/MacOS/launcher" \
              "target/aarch64-apple-darwin/release-lto/bundle/osx/Potato Launcher.app/Contents/MacOS/launcher"

            codesign --force --deep --sign - "app/$LAUNCHER_NAME.app"

            DMG_FILENAME="${LAUNCHER_NAME}.dmg"

            # CI runner sometimes fails with "hdiutil: create failed - Resource busy", so retry a few times
            retry=0
            max_retries=5
            until [ $retry -ge $max_retries ]
            do
              hdiutil create "$DMG_FILENAME" -ov -volname "$LAUNCHER_NAME" -fs HFS+ -srcfolder "app/" && break
              retry=$((retry+1))
              echo "Retrying hdiutil create... ($retry/$max_retries)"
              sleep 5
            done

            mv "$DMG_FILENAME" build/

            mv "app/$LAUNCHER_NAME.app" "app/update.app"
            tar -czvf "build/${DATA_LAUNCHER_NAME}_macos.tar.gz" -C app "update.app"

            echo "$VERSION" > build/version_macos.txt
          fi

      - name: Set up SSH
        if: ${{ github.ref == 'refs/heads/master' && env.HAS_SSH_KEY == 'true' && env.HAS_SERVER_USER == 'true' && env.HAS_SERVER_ADDR == 'true' }}
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: no

      - name: Deploy to server
        if: ${{ github.ref == 'refs/heads/master' && env.HAS_SSH_KEY == 'true' && env.HAS_SERVER_USER == 'true' && env.HAS_SERVER_ADDR == 'true' }}
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_ADDR: ${{ secrets.SERVER_ADDR }}
          SERVER_PATH: ${{ secrets.SERVER_PATH }}
        run: scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null build/* $SERVER_USER@$SERVER_ADDR:$SERVER_PATH/

      - name: Run post-deploy script
        if: ${{ github.ref == 'refs/heads/master' && env.HAS_SSH_KEY == 'true' && env.HAS_SERVER_USER == 'true' && env.HAS_SERVER_ADDR == 'true' && env.HAS_POST_DEPLOY_SCRIPT == 'true' }}
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_ADDR: ${{ secrets.SERVER_ADDR }}
          POST_DEPLOY_SCRIPT_PATH: ${{ secrets.POST_DEPLOY_SCRIPT_PATH }}
        run: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $SERVER_USER@$SERVER_ADDR "bash \"$POST_DEPLOY_SCRIPT_PATH\""

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: launcher-${{ matrix.os }}
          path: build/*

  build-flatpak:
    name: Build Flatpak package
    runs-on: ubuntu-latest
    if: ${{ vars.FLATPAK_ID != '' }}
    env:
      UPLOAD_TO_SERVER: ${{ github.ref == 'refs/heads/master' && secrets.SSH_KEY != '' && secrets.SERVER_USER != '' && secrets.SERVER_ADDR != '' }}
      HAS_POST_DEPLOY_SCRIPT: ${{ secrets.POST_DEPLOY_SCRIPT_PATH != '' }}
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-44
      options: --privileged

    steps:
      - uses: actions/checkout@v4

      - name: Install flatpak-cargo-generator dependencies
        run: dnf install -y python3 python3-aiohttp python3-toml wget
      - name: Run flatpak-cargo-generator
        run: |
          wget -O flatpak/flatpak-cargo-generator.py https://raw.githubusercontent.com/flatpak/flatpak-builder-tools/a1eb29c5f3038413ffafd4fea34e62c361c109ad/cargo/flatpak-cargo-generator.py
          python flatpak/flatpak-cargo-generator.py Cargo.lock -o flatpak/cargo-sources.json

      - name: Set bundle filename
        run: |
          BUNDLE_FILENAME=$(python -c "import os; print(''.join(x.capitalize() for x in '${{ vars.LAUNCHER_NAME }}'.lower().split()))").flatpak
          echo "BUNDLE_FILENAME=$BUNDLE_FILENAME" >> $GITHUB_ENV

      - name: Generate manifest
        working-directory: flatpak
        env:
          VERSION: ${{ github.sha }}
          FLATPAK_ID: ${{ vars.FLATPAK_ID }}
          LAUNCHER_NAME: ${{ vars.LAUNCHER_NAME }}
          LAUNCHER_DESCRIPTION: ${{ vars.LAUNCHER_DESCRIPTION }}
          FLATPAK_KEYWORDS: ${{ vars.FLATPAK_KEYWORDS }}
          VERSION_MANIFEST_URL: ${{ vars.VERSION_MANIFEST_URL }}
        run: python gen_manifest.py

      - name: Build Flatpak package
        uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          bundle: ${{ env.BUNDLE_FILENAME }}
          manifest-path: flatpak/${{ vars.FLATPAK_ID }}.yml

      - name: Set up SSH
        if: ${{ env.UPLOAD_TO_SERVER }}
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: no

      - name: Upload to server
        if: ${{ env.UPLOAD_TO_SERVER }}
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_ADDR: ${{ secrets.SERVER_ADDR }}
          SERVER_PATH: ${{ secrets.SERVER_PATH }}
        run: scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $BUNDLE_FILENAME $SERVER_USER@$SERVER_ADDR:$SERVER_PATH/

      - name: Run post-deploy script
        if: ${{ env.UPLOAD_TO_SERVER && env.HAS_POST_DEPLOY_SCRIPT == 'true' }}
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_ADDR: ${{ secrets.SERVER_ADDR }}
          POST_DEPLOY_SCRIPT_PATH: ${{ secrets.POST_DEPLOY_SCRIPT_PATH }}
        run: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $SERVER_USER@$SERVER_ADDR "bash \"$POST_DEPLOY_SCRIPT_PATH\""

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: launcher-flatpak
          path: $BUNDLE_FILENAME
